THREE.GPUParticleSystem=function(a){var b,c,d,e=this;for(a=a||{},e.PARTICLE_COUNT=a.maxParticles||1e6,e.PARTICLE_CONTAINERS=a.containerCount||1,e.PARTICLE_NOISE_TEXTURE=a.particleNoiseTex||null,e.PARTICLE_SPRITE_TEXTURE=a.particleSpriteTex||null,e.PARTICLES_PER_CONTAINER=Math.ceil(e.PARTICLE_COUNT/e.PARTICLE_CONTAINERS),e.PARTICLE_CURSOR=0,e.time=0,b={vertexShader:["precision highp float;","const vec4 bitSh = vec4(256. * 256. * 256., 256. * 256., 256., 1.);","const vec4 bitMsk = vec4(0.,vec3(1./256.0));","const vec4 bitShifts = vec4(1.) / bitSh;","#define FLOAT_MAX 1.70141184e38","#define FLOAT_MIN 1.17549435e-38","lowp vec4 encode_float(highp float v) {","highp float av = abs(v);","//Handle special cases","if(av < FLOAT_MIN) {","return vec4(0.0, 0.0, 0.0, 0.0);","} else if(v > FLOAT_MAX) {","return vec4(127.0, 128.0, 0.0, 0.0) / 255.0;","} else if(v < -FLOAT_MAX) {","return vec4(255.0, 128.0, 0.0, 0.0) / 255.0;","}","highp vec4 c = vec4(0,0,0,0);","//Compute exponent and mantissa","highp float e = floor(log2(av));","highp float m = av * pow(2.0, -e) - 1.0;","c[1] = floor(128.0 * m);","m -= c[1] / 128.0;","c[2] = floor(32768.0 * m);","m -= c[2] / 32768.0;","c[3] = floor(8388608.0 * m);","//Unpack exponent","highp float ebias = e + 127.0;","c[0] = floor(ebias / 2.0);","ebias -= c[0] * 2.0;","c[1] += floor(ebias) * 128.0;","//Unpack sign bit","c[0] += 128.0 * step(0.0, -v);","//Scale back to range","return c / 255.0;","}","vec4 pack(const in float depth)","{","const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);","const vec4 bit_mask = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);","vec4 res = mod(depth*bit_shift*vec4(255), vec4(256))/vec4(255);","res -= res.xxyz * bit_mask;","return res;","}","float unpack(const in vec4 rgba_depth)","{","const vec4 bit_shift = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);","float depth = dot(rgba_depth, bit_shift);","return depth;","}","uniform float uTime;","uniform float uScale;","uniform sampler2D tNoise;","attribute vec4 particlePositionsStartTime;","attribute vec4 particleVelColSizeLife;","varying vec4 vColor;","varying float lifeLeft;","void main() {","// unpack things from our attributes","vColor = encode_float( particleVelColSizeLife.y );","// convert our velocity back into a value we can use","vec4 velTurb = encode_float( particleVelColSizeLife.x );","vec3 velocity = vec3( velTurb.xyz );","float turbulence = velTurb.w;","vec3 newPosition;","float timeElapsed = uTime - particlePositionsStartTime.a;","lifeLeft = 1. - (timeElapsed / particleVelColSizeLife.w);","gl_PointSize = ( uScale * particleVelColSizeLife.z ) * lifeLeft;","velocity.x = ( velocity.x - .5 ) * 3.;","velocity.y = ( velocity.y - .5 ) * 3.;","velocity.z = ( velocity.z - .5 ) * 3.;","newPosition = particlePositionsStartTime.xyz + ( velocity * 10. ) * ( uTime - particlePositionsStartTime.a );","vec3 noise = texture2D( tNoise, vec2( newPosition.x * .015 + (uTime * .05), newPosition.y * .02 + (uTime * .015) )).rgb;","vec3 noiseVel = ( noise.rgb - .5 ) * 30.;","newPosition = mix(newPosition, newPosition + vec3(noiseVel * ( turbulence * 5. ) ), (timeElapsed / particleVelColSizeLife.a) );","if( velocity.y > 0. && velocity.y < .05 ) {","lifeLeft = 0.;","}","if( velocity.x < -1.45 ) {","lifeLeft = 0.;","}","if( timeElapsed > 0. ) {","gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );","} else {","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","lifeLeft = 0.;","gl_PointSize = 0.;","}","}"].join("\n"),fragmentShader:["float scaleLinear(float value, vec2 valueDomain) {","return (value - valueDomain.x) / (valueDomain.y - valueDomain.x);","}","float scaleLinear(float value, vec2 valueDomain, vec2 valueRange) {","return mix(valueRange.x, valueRange.y, scaleLinear(value, valueDomain));","}","varying vec4 vColor;","varying float lifeLeft;","uniform sampler2D tSprite;","void main() {","float alpha = 0.;","if( lifeLeft > .995 ) {","alpha = scaleLinear( lifeLeft, vec2(1., .995), vec2(0., 1.));//mix( 0., 1., ( lifeLeft - .95 ) * 100. ) * .75;","} else {","alpha = lifeLeft * .75;","}","vec4 tex = texture2D( tSprite, gl_PointCoord );","gl_FragColor = vec4( vColor.rgb * tex.a, alpha * tex.a );","}"].join("\n")},e.rand=[],c=1e5;c>0;c--)e.rand.push(Math.random()-.5);e.random=function(){return++c>=e.rand.length?e.rand[c=1]:e.rand[c]},d=new THREE.TextureLoader,e.particleNoiseTex=e.PARTICLE_NOISE_TEXTURE||d.load("data/texture/particles/perlin-512.png"),e.particleNoiseTex.wrapS=e.particleNoiseTex.wrapT=THREE.RepeatWrapping,e.particleSpriteTex=e.PARTICLE_SPRITE_TEXTURE||d.load("data/texture/particles/particle2.png"),e.particleSpriteTex.wrapS=e.particleSpriteTex.wrapT=THREE.RepeatWrapping,e.particleShaderMat=new THREE.ShaderMaterial({transparent:!0,depthWrite:!1,uniforms:{uTime:{value:0},uScale:{value:1},tNoise:{value:e.particleNoiseTex},tSprite:{value:e.particleSpriteTex}},blending:THREE.AdditiveBlending,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader}),e.particleShaderMat.defaultAttributeValues.particlePositionsStartTime=[0,0,0,0],e.particleShaderMat.defaultAttributeValues.particleVelColSizeLife=[0,0,0,0],e.particleContainers=[],THREE.Object3D.apply(this,arguments),this.init=function(){var a,b;for(a=0;a<e.PARTICLE_CONTAINERS;a++)b=new THREE.GPUParticleContainer(e.PARTICLES_PER_CONTAINER,e),e.particleContainers.push(b),e.add(b)},this.spawnParticle=function(a){e.PARTICLE_CURSOR++,e.PARTICLE_CURSOR>=e.PARTICLE_COUNT&&(e.PARTICLE_CURSOR=1);var b=e.particleContainers[Math.floor(e.PARTICLE_CURSOR/e.PARTICLES_PER_CONTAINER)];b.spawnParticle(a)},this.update=function(a){for(var b=0;b<e.PARTICLE_CONTAINERS;b++)e.particleContainers[b].update(a)},this.init()},THREE.GPUParticleSystem.prototype=Object.create(THREE.Object3D.prototype),THREE.GPUParticleSystem.prototype.constructor=THREE.GPUParticleSystem,THREE.GPUParticleContainer=function(a,b){function c(a,b,c,d){return e[0]=Math.floor(d),e[1]=Math.floor(c),e[2]=Math.floor(b),e[3]=Math.floor(a),f[0]}function d(a){var b=a>>16,c=(65280&a)>>8,d=255&a;return b>0&&b--,c>0&&c--,d>0&&d--,[b,c,d]}var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t=this;for(t.PARTICLE_COUNT=a||1e5,t.PARTICLE_CURSOR=0,t.time=0,t.DPR=window.devicePixelRatio,t.GPUParticleSystem=b,Math.floor(t.PARTICLE_COUNT/t.MAX_ATTRIBUTES),THREE.Object3D.apply(this,arguments),e=new Uint8Array(4),f=new Float32Array(e.buffer),t.particles=[],t.deadParticles=[],t.particlesAvailableSlot=[],t.particleUpdate=!1,t.particleShaderGeo=new THREE.BufferGeometry,t.particleVertices=new Float32Array(3*t.PARTICLE_COUNT),t.particlePositionsStartTime=new Float32Array(4*t.PARTICLE_COUNT),t.particleVelColSizeLife=new Float32Array(4*t.PARTICLE_COUNT),g=0;g<t.PARTICLE_COUNT;g++)t.particlePositionsStartTime[4*g+0]=100,t.particlePositionsStartTime[4*g+1]=0,t.particlePositionsStartTime[4*g+2]=0,t.particlePositionsStartTime[4*g+3]=0,t.particleVertices[3*g+0]=0,t.particleVertices[3*g+1]=0,t.particleVertices[3*g+2]=0,t.particleVelColSizeLife[4*g+0]=c(128,128,0,0),t.particleVelColSizeLife[4*g+1]=c(0,254,0,254),t.particleVelColSizeLife[4*g+2]=1,t.particleVelColSizeLife[4*g+3]=0;t.particleShaderGeo.addAttribute("position",new THREE.BufferAttribute(t.particleVertices,3)),t.particleShaderGeo.addAttribute("particlePositionsStartTime",new THREE.BufferAttribute(t.particlePositionsStartTime,4).setDynamic(!0)),t.particleShaderGeo.addAttribute("particleVelColSizeLife",new THREE.BufferAttribute(t.particleVelColSizeLife,4).setDynamic(!0)),t.posStart=t.particleShaderGeo.getAttribute("particlePositionsStartTime"),t.velCol=t.particleShaderGeo.getAttribute("particleVelColSizeLife"),t.particleShaderMat=t.GPUParticleSystem.particleShaderMat,this.init=function(){t.particleSystem=new THREE.Points(t.particleShaderGeo,t.particleShaderMat),t.particleSystem.frustumCulled=!1,this.add(t.particleSystem)},h=new THREE.Vector3,i=new THREE.Vector3,j=0,k=0,l=16777215,m=0,n=0,o=0,p=0,q=!1,r=2,s=250,this.offset=0,this.count=0,this.spawnParticle=function(a){var e,f,u,v,w,x;for(a=a||{},h=void 0!==a.position?h.copy(a.position):h.set(0,0,0),i=void 0!==a.velocity?i.copy(a.velocity):i.set(0,0,0),j=void 0!==a.positionRandomness?a.positionRandomness:0,k=void 0!==a.velocityRandomness?a.velocityRandomness:0,l=void 0!==a.color?a.color:16777215,m=void 0!==a.colorRandomness?a.colorRandomness:1,v=void 0!==a.turbulence?a.turbulence:1,n=void 0!==a.lifetime?a.lifetime:5,o=void 0!==a.size?a.size:10,p=void 0!==a.sizeRandomness?a.sizeRandomness:0,q=void 0!==a.smoothPosition?a.smoothPosition:!1,void 0!==t.DPR&&(o*=t.DPR),g=t.PARTICLE_CURSOR,t.posStart.array[4*g+0]=h.x+b.random()*j,t.posStart.array[4*g+1]=h.y+b.random()*j,t.posStart.array[4*g+2]=h.z+b.random()*j,t.posStart.array[4*g+3]=t.time+.02*b.random(),q===!0&&(t.posStart.array[4*g+0]+=-(i.x*b.random()),t.posStart.array[4*g+1]+=-(i.y*b.random()),t.posStart.array[4*g+2]+=-(i.z*b.random())),e=i.x+b.random()*k,f=i.y+b.random()*k,u=i.z+b.random()*k,v=Math.floor(254*v),e=Math.floor(s*((e- -r)/(r- -r))),f=Math.floor(s*((f- -r)/(r- -r))),u=Math.floor(s*((u- -r)/(r- -r))),t.velCol.array[4*g+0]=c(e,f,u,v),w=d(l),x=0;x<w.length;x++)w[x]=Math.floor(w[x]+254*b.random()*m),w[x]>254&&(w[x]=254),w[x]<0&&(w[x]=0);t.velCol.array[4*g+1]=c(w[0],w[1],w[2],254),t.velCol.array[4*g+2]=o+b.random()*p,t.velCol.array[4*g+3]=n,0==this.offset&&(this.offset=t.PARTICLE_CURSOR),t.count++,t.PARTICLE_CURSOR++,t.PARTICLE_CURSOR>=t.PARTICLE_COUNT&&(t.PARTICLE_CURSOR=0),t.particleUpdate=!0},this.update=function(a){t.time=a,t.particleShaderMat.uniforms.uTime.value=a,this.geometryUpdate()},this.geometryUpdate=function(){1==t.particleUpdate&&(t.particleUpdate=!1,t.offset+t.count<t.PARTICLE_COUNT?(t.posStart.updateRange.offset=t.velCol.updateRange.offset=4*t.offset,t.posStart.updateRange.count=t.velCol.updateRange.count=4*t.count):(t.posStart.updateRange.offset=0,t.posStart.updateRange.count=t.velCol.updateRange.count=4*t.PARTICLE_COUNT),t.posStart.needsUpdate=!0,t.velCol.needsUpdate=!0,t.offset=0,t.count=0)},this.init()},THREE.GPUParticleContainer.prototype=Object.create(THREE.Object3D.prototype),THREE.GPUParticleContainer.prototype.constructor=THREE.GPUParticleContainer;